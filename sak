#!/usr/bin/env python3
import sys, argparse, logging
modes=["auto", "video", "reddit", "webpage", "website"]
parser = argparse.ArgumentParser(description='Archives digital content.')

parser.add_argument('mode', help='mode ({})'.format(modes))
parser.add_argument('--upload', action="store_true", help='upload to archive.org')
parser.add_argument('--debug', action="store_true", help='enable debug logging')
parser.add_argument('--url-hash', action="store_true", help='upload to archive.org')
parser.add_argument('--filename', help='filename to archive to')
parser.add_argument('--log', help='filename to write log files to')
parser.add_argument('urls', nargs='+', help='url to archive')

args = parser.parse_args()
mode = args.mode
urls = args.urls

charLimit = 50

level = logging.DEBUG if args.debug else logging.INFO
logging.basicConfig(level=level)
formatStr = '[%(name)s][%(levelname)8s]\t %(message)s'
formatter = logging.Formatter(formatStr)
timeFormatter = logging.Formatter('[%(asctime)s]'+formatStr)
ch = logging.StreamHandler()
ch.setLevel(level)
ch.setFormatter(formatter)

if args.log:
    fh = logging.FileHandler(args.log+".sak.log")
    fh.setLevel(logging.DEBUG)
    fh.setFormatter(timeFormatter)

for url in urls:
    l = logging.getLogger(url[0:100])
    l.propagate = False
    l.addHandler(ch)
    if args.log:
        l.addHandler(fh)
    if mode == modes[3]:
        l.info("Treating link as webpage")
        try:
            from archivenow.handlers import warc_handler
            from archivenow.handlers import ia_handler
            warcHandler = warc_handler.WARC_handler()
            iaHandler = ia_handler.IA_handler()
        except ModuleNotFoundError as e:
            l.critical("Please install archivenow from https://github.com/oduwsdl/archivenow to download webpages. (alternatively, install via pip `pip install archivenow`)")
            # TODO: implement wget backup
            exit(1)
        filename=""
        if args.filename:
            filename = args.filename
        if args.url_hash or not args.filename:
            from hashlib import sha256
            urlhash = sha256(url.encode()).hexdigest()[0:charLimit]
            if not args.filename:
                if not args.url_hash:
                    l.warning("No filename specified, generating hash to use as filename (use --url-hash to disable this warning)")
                filename = urlhash
            else:
                filename = filename+"-"+urlhash
        archivedUrl = warcHandler.push(url, {"warc": filename})
        l.info("Writing warc to "+filename+".warc")
        if args.upload:
            l.info("Adding to archive.org")
            archivedUrl = iaHandler.push(url)
            l.info(f"Archived url is {archivedUrl}")
        import os
        os.setxattr(filename+".warc", "user.url", url.encode())
        with open(filename+".url", "w") as f:
            l.info("Writing url to "+filename+".url")
            f.write(url)
            if args.upload:
                f.write("\n"+archivedUrl)

